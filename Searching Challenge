Searching Challenge
Have the function SearchingChallenge(strArr) take the array of strings stored in strArr, which will be a 2D matrix of 0 and 1's, and determine how many holes, or contiguous regions of 0's, exist in the matrix. A contiguous region is one where there is a connected group of 0's going in one or more of four directions: up, down, left, or right. For example: if strArr is ["10111", "10101", "11101", "11111"], then this looks like the following matrix:

1 0 1 1 1
1 0 1 0 1
1 1 1 0 1
1 1 1 1 1

For the input above, your program should return 2 because there are two separate contiguous regions of 0's, which create "holes" in the matrix. You can assume the input will not be empty.
Examples
Input: ["01111", "01101", "00011", "11110"]
Output: 3
Input: ["1011", "0010"]
Output: 2

// Solution:

function SearchingChallenge(strArr) { 
  const matrix = strArr.map(row => row.split('').map(Number));
  const numRows = matrix.length;
  const numCols = matrix[0].length;
  const visited = Array.from({ length : numRows }, ()=> Array(numCols).fill(false));

  let holeCount = 0;

  function isValid (row,col) {
    return row >= 0 && row < numRows && col >= 0 && col < numCols;
  }

  function dfs(row,col) {
    if(! isValid (row,col) || visited [row] [col] || matrix [row] [col] === 1) {
      return;
    }

    visited [row] [col] = true;

    dfs(row -1, col);
    dfs(row +1, col);
    dfs(row, col -1);
    dfs(row, col +1);
  }

  for (let row = 0; row < numRows; row++) {
    for ( let col = 0; col < numCols; col++) {
      if(! visited [row] [col] && matrix [row] [col] === 0 ) {
        dfs(row, col);
        holeCount++;
      }
    }
  }
  return holeCount; 

}
   
// keep this function call here 
console.log(SearchingChallenge(readline()));
